import math
import numpy as np
from pprint import pformat
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

ABSOLUTE_ZERO = 273.15


def get_temp_by_adc(c, b=3380):
    return (1 / (1 / (25 + ABSOLUTE_ZERO) - ((math.log(c / (4095 - c))) / b))) - ABSOLUTE_ZERO


def get_adc_by_resust(r):
    return (10 / (10 + r)) * 4095


def get_B_by_TR(t, r):
    return math.log(10 / r) / (1 / (25 + ABSOLUTE_ZERO) - 1 / (t + ABSOLUTE_ZERO))


datas = (
    (-55, 541.187, 569.200, 598.603, 5.165, -4.921, 0.748, -0.712),
    (-54, 499.752, 525.197, 551.883, 5.081, -4.844, 0.744, -0.710),
    (-53, 462.563, 485.735, 510.017, 4.999, -4.770, 0.741, -0.707),
    (-52, 429.057, 450.209, 472.357, 4.919, -4.698, 0.737, -0.704),
    (-51, 398.763, 418.112, 438.356, 4.841, -4.627, 0.734, -0.701),
    (-50, 371.279, 389.014, 407.555, 4.766, -4.558, 0.730, -0.699),
    (-49, 346.267, 362.552, 379.564, 4.692, -4.491, 0.727, -0.695),
    (-48, 323.438, 338.416, 354.052, 4.620, -4.425, 0.723, -0.692),
    (-47, 302.545, 316.341, 330.734, 4.549, -4.361, 0.719, -0.689),
    (-46, 283.373, 296.100, 309.367, 4.480, -4.298, 0.715, -0.686),
    (-45, 265.740, 277.494, 289.739, 4.412, -4.235, 0.711, -0.682),
    (-44, 249.485, 260.354, 271.670, 4.346, -4.174, 0.707, -0.679),
    (-43, 234.470, 244.532, 255.000, 4.280, -4.114, 0.702, -0.675),
    (-42, 220.573, 229.897, 239.591, 4.216, -4.055, 0.698, -0.671),
    (-41, 207.689, 216.336, 225.321, 4.153, -3.997, 0.694, -0.668),
    (-40, 195.722, 203.750, 212.085, 4.090, -3.939, 0.689, -0.664),
    (-39, 184.592, 192.049, 199.787, 4.029, -3.882, 0.685, -0.660),
    (-38, 174.223, 181.156, 188.345, 3.968, -3.826, 0.680, -0.656),
    (-37, 164.552, 171.001, 177.684, 3.908, -3.771, 0.676, -0.652),
    (-36, 155.519, 161.522, 167.739, 3.849, -3.716, 0.671, -0.648),
    (-35, 147.074, 152.664, 158.451, 3.790, -3.661, 0.666, -0.643),
    (-34, 139.168, 144.377, 149.767, 3.732, -3.608, 0.661, -0.639),
    (-33, 131.760, 136.617, 141.638, 3.675, -3.554, 0.656, -0.635),
    (-32, 124.813, 129.343, 134.023, 3.618, -3.502, 0.651, -0.630),
    (-31, 118.291, 122.518, 126.883, 3.562, -3.449, 0.646, -0.626),
    (-30, 112.164, 116.110, 120.182, 3.507, -3.397, 0.641, -0.621),
    (-29, 106.404, 110.088, 113.888, 3.451, -3.346, 0.636, -0.616),
    (-28, 100.983, 104.425, 107.972, 3.397, -3.295, 0.631, -0.612),
    (-27, 95.880, 99.096, 102.409, 3.343, -3.244, 0.625, -0.607),
    (-26, 91.072, 94.078, 97.172, 3.289, -3.194, 0.620, -0.602),
    (-25, 86.540, 89.350, 92.241, 3.236, -3.144, 0.614, -0.597),
    (-24, 82.265, 84.892, 87.595, 3.183, -3.094, 0.609, -0.592),
    (-23, 78.230, 80.688, 83.214, 3.131, -3.045, 0.603, -0.587),
    (-22, 74.420, 76.720, 79.082, 3.079, -2.996, 0.598, -0.582),
    (-21, 70.822, 72.973, 75.182, 3.027, -2.948, 0.592, -0.577),
    (-20, 67.420, 69.434, 71.500, 2.976, -2.899, 0.586, -0.571),
    (-19, 64.204, 66.089, 68.022, 2.925, -2.851, 0.581, -0.566),
    (-18, 61.162, 62.926, 64.735, 2.874, -2.804, 0.575, -0.561),
    (-17, 58.283, 59.935, 61.628, 2.824, -2.756, 0.569, -0.55),
    (-16, 55.557, 57.104, 58.689, 2.775, -2.709, 0.563, -0.550),
    (-15, 52.976, 54.425, 55.909, 2.725, -2.663, 0.557, -0.544),
    (-14, 50.530, 51.888, 53.277, 2.676, -2.616, 0.551, -0.538),
    (-13, 48.212, 49.484, 50.785, 2.628, -2.570, 0.544, -0.532),
    (-12, 46.015, 47.206, 48.424, 2.579, -2.524, 0.538, -0.527),
    (-11, 43.930, 45.047, 46.188, 2.531, -2.478, 0.532, -0.521),
    (-10, 41.953, 43.000, 44.068, 2.483, -2.433, 0.526, -0.515),
    (-9, 40.077, 41.057, 42.058, 2.436, -2.388, 0.519, -0.509),
    (-8, 38.295, 39.214, 40.151, 2.389, -2.343, 0.513, -0.503),
    (-7, 36.603, 37.465, 38.343, 2.342, -2.299, 0.506, -0.497),
    (-6, 34.997, 35.804, 36.626, 2.296, -2.254, 0.500, -0.491),
    (-5, 33.470, 34.226, 34.996, 2.250, -2.210, 0.493, -0.484),
    (-4, 32.018, 32.727, 33.449, 2.204, -2.166, 0.486, -0.478),
    (-3, 30.638, 31.303, 31.979, 2.159, -2.123, 0.480, -0.472),
    (-2, 29.326, 29.949, 30.582, 2.113, -2.080, 0.473, -0.465),
    (-1, 28.078, 28.661, 29.254, 2.069, -2.036, 0.466, -0.459),
    (0, 26.963, 27.513, 28.070, 2.027, -1.996, 0.458, -0.451),
    (1, 25.759, 26.271, 26.792, 1.980, -1.951, 0.452, -0.445),
    (2, 24.682, 25.162, 25.650, 1.936, -1.909, 0.445, -0.439),
    (3, 23.656, 24.107, 24.563, 1.892, -1.867, 0.438, -0.432),
    (4, 22.680, 23.101, 23.529, 1.849, -1.825, 0.431, -0.425),
    (5, 21.749, 22.144, 22.544, 1.806, -1.783, 0.423, -0.418),
    (6, 20.861, 21.231, 21.606, 1.763, -1.742, 0.416, -0.411),
    (7, 20.015, 20.362, 20.712, 1.720, -1.701, 0.409, -0.404),
    (8, 19.208, 19.533, 19.861, 1.678, -1.660, 0.401, -0.397),
    (9, 18.439, 18.742, 19.049, 1.636, -1.619, 0.394, -0.390),
    (10, 17.731, 18.016, 18.303, 1.596, -1.581, 0.386, -0.382),
    (11, 17.003, 17.269, 17.537, 1.553, -1.539, 0.379, -0.375),
    (12, 16.334, 16.583, 16.834, 1.512, -1.499, 0.371, -0.368),
    (13, 15.695, 15.928, 16.162, 1.471, -1.459, 0.364, -0.361),
    (14, 15.085, 15.302, 15.521, 1.430, -1.420, 0.356, -0.353),
    (15, 14.501, 14.704, 14.909, 1.390, -1.381, 0.348, -0.346),
    (16, 13.944, 14.134, 14.324, 1.350, -1.341, 0.340, -0.338),
    (17, 13.411, 13.588, 13.766, 1.310, -1.303, 0.332, -0.330),
    (18, 12.901, 13.067, 13.233, 1.270, -1.264, 0.324, -0.323),
    (19, 12.414, 12.568, 12.723, 1.231, -1.226, 0.316, -0.315),
    (20, 11.948, 12.092, 12.236, 1.192, -1.187, 0.308, -0.307),
    (21, 11.502, 11.636, 11.770, 1.153, -1.149, 0.300, -0.299),
    (22, 11.075, 11.199, 11.324, 1.114, -1.112, 0.292, -0.291),
    (23, 10.666, 10.782, 10.898, 1.076, -1.074, 0.283, -0.283),
    (24, 10.274, 10.382, 10.490, 1.037, -1.037, 0.275, -0.275),
    # (25, 9.900, 10.000, 10.100, 1.000, -1.000, 0.267, -0.267),
    (26, 9.533, 9.633, 9.733, 1.037, -1.036, 0.278, -0.278),
    (27, 9.182, 9.282, 9.382, 1.075, -1.073, 0.290, -0.290),
    (28, 8.846, 8.946, 9.045, 1.112, -1.110, 0.302, -0.302),
    (29, 8.524, 8.623, 8.722, 1.149, -1.146, 0.314, -0.313),
    (30, 8.216, 8.314, 8.413, 1.186, -1.182, 0.326, -0.325),
    (31, 7.920, 8.018, 8.116, 1.223, -1.218, 0.339, -0.337),
    (32, 7.637, 7.734, 7.831, 1.259, -1.254, 0.351, -0.349),
    (33, 7.365, 7.461, 7.558, 1.296, -1.289, 0.363, -0.361),
    (34, 7.104, 7.199, 7.295, 1.332, -1.324, 0.376, -0.373),
    (35, 6.854, 6.948, 7.043, 1.368, -1.359, 0.388, -0.386),
    (36, 6.614, 6.707, 6.801, 1.404, -1.394, 0.401, -0.398),
    (37, 6.383, 6.476, 6.569, 1.439, -1.429, 0.413, -0.410),
    (38, 6.162, 6.254, 6.346, 1.475, -1.463, 0.426, -0.423),
    (39, 5.950, 6.040, 6.131, 1.510, -1.497, 0.439, -0.435),
    (40, 5.746, 5.835, 5.925, 1.545, -1.531, 0.452, -0.448),
    (41, 5.550, 5.638, 5.727, 1.580, -1.565, 0.464, -0.460),
    (42, 5.361, 5.449, 5.537, 1.615, -1.599, 0.478, -0.473),
    (43, 5.181, 5.267, 5.353, 1.649, -1.632, 0.491, -0.486),
    (44, 5.007, 5.091, 5.177, 1.683, -1.665, 0.504, -0.498),
    (45, 4.839, 4.923, 5.008, 1.718, -1.698, 0.517, -0.511),
    (46, 4.679, 4.761, 4.844, 1.752, -1.731, 0.530, -0.524),
    (47, 4.524, 4.605, 4.687, 1.786, -1.764, 0.544, -0.537),
    (48, 4.375, 4.455, 4.536, 1.819, -1.797, 0.557, -0.550),
    (49, 4.232, 4.311, 4.391, 1.853, -1.829, 0.571, -0.563),
    (50, 4.090, 4.168, 4.246, 1.887, -1.862, 0.584, -0.576),
    (51, 3.961, 4.038, 4.115, 1.919, -1.893, 0.598, -0.590),
    (52, 3.834, 3.909, 3.985, 1.953, -1.925, 0.612, -0.603),
    (53, 3.711, 3.785, 3.860, 1.985, -1.957, 0.626, -0.617),
    (54, 3.592, 3.665, 3.739, 2.018, -1.988, 0.640, -0.630),
    (55, 3.478, 3.550, 3.623, 2.051, -2.019, 0.654, -0.644),
    (56, 3.368, 3.439, 3.511, 2.083, -2.050, 0.668, -0.657),
    (57, 3.263, 3.332, 3.402, 2.115, -2.081, 0.682, -0.671),
    (58, 3.160, 3.229, 3.298, 2.148, -2.112, 0.696, -0.685),
    (59, 3.062, 3.129, 3.197, 2.180, -2.143, 0.710, -0.698),
    (60, 2.967, 3.033, 3.100, 2.211, -2.173, 0.725, -0.712),
    (61, 2.876, 2.941, 3.007, 2.243, -2.204, 0.739, -0.726),
    (62, 2.788, 2.851, 2.916, 2.275, -2.234, 0.754, -0.740),
    (63, 2.702, 2.765, 2.829, 2.306, -2.264, 0.768, -0.754),
    (64, 2.620, 2.682, 2.745, 2.337, -2.294, 0.783, -0.768),
    (65, 2.541, 2.602, 2.663, 2.368, -2.323, 0.798, -0.783),
    (66, 2.465, 2.524, 2.585, 2.399, -2.353, 0.813, -0.797),
    (67, 2.391, 2.449, 2.509, 2.430, -2.382, 0.828, -0.811),
    (68, 2.320, 2.377, 2.436, 2.461, -2.411, 0.843, -0.826),
    (69, 2.251, 2.307, 2.365, 2.491, -2.441, 0.858, -0.840),
    (70, 2.185, 2.240, 2.296, 2.522, -2.469, 0.873, -0.855),
    (71, 2.120, 2.175, 2.230, 2.552, -2.498, 0.888, -0.869),
    (72, 2.058, 2.112, 2.166, 2.582, -2.527, 0.903, -0.884),
    (73, 1.999, 2.051, 2.105, 2.612, -2.555, 0.919, -0.899),
    (74, 1.941, 1.992, 2.045, 2.642, -2.584, 0.934, -0.913),
    (75, 1.885, 1.935, 1.987, 2.672, -2.612, 0.950, -0.928),
    (76, 1.831, 1.880, 1.931, 2.701, -2.640, 0.965, -0.943),
    (77, 1.779, 1.827, 1.877, 2.731, -2.668, 0.981, -0.958),
    (78, 1.728, 1.776, 1.825, 2.760, -2.695, 0.997, -0.973),
    (79, 1.679, 1.726, 1.775, 2.789, -2.723, 1.013, -0.989),
    (80, 1.632, 1.678, 1.726, 2.818, -2.750, 1.028, -1.004),
    (81, 1.587, 1.632, 1.678, 2.847, -2.778, 1.044, -1.019),
    (82, 1.542, 1.587, 1.633, 2.876, -2.805, 1.061, -1.034),
    (83, 1.500, 1.543, 1.588, 2.904, -2.832, 1.077, -1.050),
    (84, 1.458, 1.501, 1.545, 2.933, -2.859, 1.093, -1.065),
    (85, 1.418, 1.461, 1.504, 2.961, -2.886, 1.109, -1.081),
    (86, 1.380, 1.421, 1.464, 2.989, -2.912, 1.126, -1.097),
    (87, 1.342, 1.383, 1.425, 3.017, -2.939, 1.142, -1.112),
    (88, 1.306, 1.346, 1.387, 3.045, -2.965, 1.159, -1.128),
    (89, 1.271, 1.310, 1.350, 3.073, -2.991, 1.175, -1.144),
    (90, 1.237, 1.275, 1.315, 3.101, -3.017, 1.192, -1.160),
    (91, 1.204, 1.242, 1.281, 3.128, -3.043, 1.209, -1.176),
    (92, 1.172, 1.209, 1.247, 3.156, -3.069, 1.226, -1.192),
    (93, 1.141, 1.178, 1.215, 3.183, -3.094, 1.243, -1.208),
    (94, 1.111, 1.147, 1.184, 3.210, -3.120, 1.260, -1.224),
    (95, 1.082, 1.117, 1.154, 3.237, -3.145, 1.277, -1.240),
    (96, 1.054, 1.089, 1.124, 3.264, -3.170, 1.294, -1.257),
    (97, 1.027, 1.061, 1.096, 3.290, -3.195, 1.311, -1.273),
    (98, 1.001, 1.034, 1.068, 3.317, -3.220, 1.328, -1.290),
    (99, 0.975, 1.008, 1.042, 3.344, -3.245, 1.346, -1.306),
    (100, 0.950, 0.983, 1.016, 3.370, -3.270, 1.363, -1.323),
    (101, 0.926, 0.958, 0.990, 3.396, -3.294, 1.381, -1.339),
    (102, 0.903, 0.934, 0.966, 3.422, -3.318, 1.398, -1.356),
    (103, 0.880, 0.911, 0.942, 3.448, -3.343, 1.416, -1.373),
    (104, 0.859, 0.889, 0.919, 3.474, -3.367, 1.434, -1.390),
    (105, 0.837, 0.867, 0.897, 3.499, -3.391, 1.452, -1.407),
    (106, 0.817, 0.846, 0.876, 3.525, -3.414, 1.470, -1.424),
    (107, 0.797, 0.825, 0.855, 3.550, -3.438, 1.488, -1.441),
    (108, 0.777, 0.805, 0.834, 3.575, -3.462, 1.506, -1.458),
    (109, 0.759, 0.786, 0.814, 3.601, -3.485, 1.524, -1.475),
    (110, 0.740, 0.767, 0.795, 3.626, -3.508, 1.543, -1.493),
    (111, 0.723, 0.749, 0.777, 3.650, -3.531, 1.561, -1.510),
    (112, 0.705, 0.732, 0.758, 3.675, -3.554, 1.579, -1.528),
    (113, 0.689, 0.714, 0.741, 3.700, -3.577, 1.598, -1.545),
    (114, 0.673, 0.698, 0.724, 3.724, -3.600, 1.617, -1.563),
    (115, 0.657, 0.682, 0.707, 3.748, -3.622, 1.635, -1.580),
    (116, 0.642, 0.666, 0.691, 3.772, -3.645, 1.654, -1.598),
    (117, 0.627, 0.651, 0.675, 3.796, -3.667, 1.673, -1.616),
    (118, 0.612, 0.636, 0.660, 3.820, -3.689, 1.692, -1.634),
    (119, 0.598, 0.622, 0.645, 3.844, -3.711, 1.711, -1.652),
    (120, 0.585, 0.608, 0.631, 3.867, -3.733, 1.730, -1.670),
    (121, 0.572, 0.594, 0.617, 3.891, -3.755, 1.749, -1.688),
    (122, 0.559, 0.581, 0.604, 3.914, -3.776, 1.768, -1.706),
    (123, 0.546, 0.568, 0.590, 3.937, -3.798, 1.788, -1.724),
    (124, 0.534, 0.556, 0.578, 3.960, -3.819, 1.807, -1.743),
    (125, 0.523, 0.544, 0.565, 3.983, -3.840, 1.827, -1.761),
)


def get_data_by_temp(t1, t2, datas=datas):
    if t2 < t1:
        t1, t2 = t2, t1
    start = 0
    stop = len(datas)
    for i, d in enumerate(datas):
        if d[0] == t1:
            start = i
        if d[0] == t2:
            stop = i
        if start != 0 and stop != len(datas):
            return datas[start: stop]

tbs = [[i[3], get_B_by_TR(i[0], i[3])] for i in get_data_by_temp(10, 55)]

tbs = []
for i in get_data_by_temp(0, 125):
    t = i[0]
    if t < 25:
        r = i[2]
    else:
        r = i[2]
    b = get_B_by_TR(t, r)
    tbs.append((r, b))


print(pformat(tbs))

def func_e3(x, a, b, c):
    return a * (x ** 2) + b * x + c


def func_pow(x, a, b):
    return a * pow(x, b)


x = np.array([i[0] for i in tbs])
y = np.array([i[1] for i in tbs])


func = func_pow
popt, pcov = curve_fit(func, x, y)


plot1 = plt.plot(x, y, "s", label="original values")
plot2 = plt.plot(x, func(x, *popt), "r", label="polyfit values p")
print(f"popt {[i for i in popt]}")
plt.xlabel("x")
plt.ylabel("y")
plt.show()
